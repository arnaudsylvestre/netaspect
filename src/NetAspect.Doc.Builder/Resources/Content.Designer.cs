//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.18444
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NetAspect.Doc.Builder.Resources {
    using System;
    
    
    /// <summary>
    ///   Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.
    /// </summary>
    // Cette classe a été générée automatiquement par la classe StronglyTypedResourceBuilder
    // à l'aide d'un outil, tel que ResGen ou Visual Studio.
    // Pour ajouter ou supprimer un membre, modifiez votre fichier .ResX, puis réexécutez ResGen
    // avec l'option /str ou régénérez votre projet VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Content {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Content() {
        }
        
        /// <summary>
        ///   Retourne l'instance ResourceManager mise en cache utilisée par cette classe.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("NetAspect.Doc.Builder.Resources.Content", typeof(Content).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Remplace la propriété CurrentUICulture du thread actuel pour toutes
        ///   les recherches de ressources à l'aide de cette classe de ressource fortement typée.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à &lt;div class=&quot;bs-docs-section&quot;&gt;
        ///		 
        ///      &lt;!-- 
        ///================================================	  
        ///	  Basics
        ///================================================
        ///	  --&gt;
        ///		 
        ///            &lt;div class=&quot;page-header&quot;&gt;
        ///               &lt;h1 id=&quot;attributes&quot;&gt;Basics&lt;/h1&gt;
        ///            &lt;/div&gt;
        ///            &lt;h3 id=&quot;dropdowns-example&quot;&gt;The sample class&lt;/h3&gt;
        ///            &lt;p&gt;Imagine that we want to log the different access on the following class : &lt;/p&gt;
        ///            &lt;pre class=&quot;prettyprint&quot;&gt;
        ///public class MyInt
        ///{
        ///   int val [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string Basics {
            get {
                return ResourceManager.GetString("Basics", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à &lt;!DOCTYPE html&gt;
        ///&lt;html lang=&quot;en&quot;&gt;
        ///   &lt;head&gt;
        ///      &lt;meta charset=&quot;utf-8&quot;&gt;
        ///      &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
        ///      &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
        ///      &lt;meta name=&quot;description&quot; content=&quot;&quot;&gt;
        ///      &lt;meta name=&quot;author&quot; content=&quot;&quot;&gt;
        ///      &lt;link rel=&quot;shortcut icon&quot; href=&quot;../../docs-assets/ico/favicon.png&quot;&gt;
        ///      &lt;title&gt;NetAspect&lt;/title&gt;
        ///      &lt;link href=&quot;bootstrap-3.0.2/dist/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;
        ///      &lt;link href=&quot;jumbotron.cs [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string Header {
            get {
                return ResourceManager.GetString("Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à &lt;h2 id=&quot;dropdowns&quot;&gt;Method Weaving&lt;/h2&gt;
        ///            &lt;p&gt;The &quot;method weaving&quot; will modify the code of the method to add behavior. It is possible to add behavior :&lt;/p&gt;
        ///            &lt;ul&gt;
        ///               &lt;li&gt;&lt;b&gt;Before&lt;/b&gt; the method is executed&lt;/li&gt;
        ///               &lt;li&gt;&lt;b&gt;After&lt;/b&gt; the method is executed when no exception is raised&lt;/li&gt;
        ///               &lt;li&gt;&lt;b&gt;When exception occurs&lt;/b&gt; in the method&lt;/li&gt;
        ///               &lt;li&gt;&lt;b&gt;On finally&lt;/b&gt; : at the end of the method when an exception is raised or not&lt;/li&gt;
        ///     [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string InstructionWeaving {
            get {
                return ResourceManager.GetString("InstructionWeaving", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à &lt;h2 id=&quot;dropdowns&quot;&gt;Method Weaving&lt;/h2&gt;
        ///            &lt;p&gt;The &quot;method weaving&quot; will modify the code of the method to add behavior. It is possible to add behavior :&lt;/p&gt;
        ///            &lt;ul&gt;
        ///               &lt;li&gt;&lt;b&gt;Before&lt;/b&gt; the method is executed&lt;/li&gt;
        ///               &lt;li&gt;&lt;b&gt;After&lt;/b&gt; the method is executed when no exception is raised&lt;/li&gt;
        ///               &lt;li&gt;&lt;b&gt;When exception occurs&lt;/b&gt; in the method&lt;/li&gt;
        ///               &lt;li&gt;&lt;b&gt;On finally&lt;/b&gt; : at the end of the method when an exception is raised or not&lt;/li&gt;
        ///     [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string MethodWeaving {
            get {
                return ResourceManager.GetString("MethodWeaving", resourceCulture);
            }
        }
    }
}
